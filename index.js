require("dotenv").config();
const express = require("express");
const bodyParser = require("body-parser");
const TelegramBot = require("node-telegram-bot-api");
const axios = require("axios");

const app = express();
const port = process.env.PORT || 3000;

// ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram-–±–æ—Ç–∞ —Å Webhook
const bot = new TelegramBot(process.env.BOT_TOKEN);
bot.setWebHook(`${process.env.BASE_URL}/bot${process.env.BOT_TOKEN}`);

app.use(bodyParser.json());

// üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
app.post(`/bot${process.env.BOT_TOKEN}`, async (req, res) => {
  const message = req.body.message;
  const chatID = message.chat.id;
  const text = message.text;

  const weather = await getWeather(text);
  bot.sendMessage(chatID, weather);

  res.sendStatus(200);
});

// üå§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
async function getWeather(city) {
  const apiKey = process.env.WEATHER_API_KEY;
  const url = `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(
    city
  )}&appid=${apiKey}&units=metric&lang=ru`;

  try {
    const response = await axios.get(url);
    const data = response.data;

    const temp = data.main.temp;
    const feelsLike = data.main.feels_like;
    const desc = data.weather[0].description;

    const aiAdvice = await getAIClothingAdvice(data.name, temp, feelsLike, desc);

    return `
üå§ –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ ${data.name}:
üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temp}¬∞C
ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: ${feelsLike}¬∞C
üìã –û–ø–∏—Å–∞–Ω–∏–µ: ${desc}

–°–æ–≤–µ—Ç:
${aiAdvice}
    `;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã:", error.message);
    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.";
  }
}

// üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ AI-—Å–æ–≤–µ—Ç–∞
async function getAIClothingAdvice(city, temp, feelsLike, description) {
  const prompt = `–í –≥–æ—Ä–æ–¥–µ ${city} —Å–µ–π—á–∞—Å ${temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${feelsLike}¬∞C), –Ω–∞ —É–ª–∏—Ü–µ ${description}.
–ß—Ç–æ –±—ã —Ç—ã –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞–ª –Ω–∞–¥–µ—Ç—å —á–µ–ª–æ–≤–µ–∫—É? –ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.`;

  try {
    const response = await axios.post(
      "https://openrouter.ai/api/v1/chat/completions",
      {
        model: "mistralai/mistral-small-3.1-24b-instruct:free",
        messages: [
          { role: "system", content: "–¢—ã –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–≥–æ–¥–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫." },
          { role: "user", content: prompt },
        ],
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
          "Content-Type": "application/json",
          "HTTP-Referer": "https://yourapp.com",
          "X-Title": "WeatherBot",
        },
      }
    );

    const message = response.data.choices?.[0]?.message?.content;
    return message || "ü§ñ AI –Ω–µ —Å–º–æ–≥ –¥–∞—Ç—å —Å–æ–≤–µ—Ç.";
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ AI:", err.response?.data || err.message);
    return "ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –æ—Ç AI.";
  }
}

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});
